esphome:
  name: livingroom
  platform: ESP32
  board: nodemcu-32s
  project:
    name: "marshallasch.plant_monitor"
    version: "1.0.1"

wifi:
  ssid: "78-2.4G"
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Livingroom Fallback Hotspot"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

i2c:

bme680_bsec:
  address: 0x77
  iaq_mode: static
  sample_rate: ulp


text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  - platform: bme680_bsec
    iaq_accuracy:
      name: "BME680 IAQ Accuracy"

sensor:

  - platform: bme680_bsec
    temperature:
      name: "BME680 Temperature"
    pressure:
      name: "BME680 Pressure"
    humidity:
      name: "BME680 Humidity"
    iaq:
      name: "BME680 IAQ"
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"

  - platform: resistance
    sensor: source_sensor
    configuration: UPSTREAM
    resistor: 10kOhm
    name: Light Sensor
    unit_of_measurement: lux
    filters:
    - lambda: return (x/500.0);

# Example source sensor:
  - platform: adc
    id: source_sensor
    pin: GPIO34
    attenuation: auto
    update_interval: 120s


  - platform: adc
    pin: GPIO35
    name: "Soil Moisture Plant 1"
    update_interval: 180s
    unit_of_measurement: "%"
    attenuation: auto
    filters:
    - median:
        window_size: 7
        send_every: 4
        send_first_at: 1
    - calibrate_linear:
        - 2.5321 -> 0.00
        - 0.950 -> 100.00
    - lambda: if (x < 1) return 0; else return (x);
    accuracy_decimals: 0

  - platform: adc
    pin: GPIO32
    name: "Soil Moisture Plant 2"
    update_interval: 180s
    unit_of_measurement: "%"
    attenuation: auto
    filters:
    - median:
        window_size: 7
        send_every: 4
        send_first_at: 1
    - calibrate_linear:
        - 2.2763 -> 0.00
        - 0.924 -> 100.00
    - lambda: if (x < 1) return 0; else return (x);
    accuracy_decimals: 0

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
